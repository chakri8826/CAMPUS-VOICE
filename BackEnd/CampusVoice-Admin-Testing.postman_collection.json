{
  "info": {
    "name": "Campus Voice - Admin User Management",
    "description": "Complete Postman collection for testing admin user management functionality",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@campus.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as admin user to get authentication token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.token) {",
                  "        pm.environment.set(\"auth_token\", response.token);",
                  "        console.log(\"‚úÖ Auth token set successfully\");",
                  "        console.log(\"User role:\", response.user.role);",
                  "    }",
                  "} else {",
                  "    console.log(\"‚ùå Login failed:\", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Register New User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\",\n  \"studentId\": \"STU001\",\n  \"department\": \"Computer Science\",\n  \"year\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user to test role updates"
          }
        }
      ]
    },
    {
      "name": "üë• User Management (Admin Only)",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Get list of all users (admin only)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.length > 0) {",
                  "        // Set the first user ID as default",
                  "        pm.environment.set(\"user_id\", response.data[0]._id);",
                  "        console.log(\"‚úÖ User ID set:\", response.data[0]._id);",
                  "        console.log(\"User name:\", response.data[0].name);",
                  "        console.log(\"Current role:\", response.data[0].role);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Single User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Get details of a specific user"
          }
        },
        {
          "name": "Update User to Admin",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Update user role to admin"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log(\"‚úÖ User updated successfully!\");",
                  "        console.log(\"New role:\", response.data.role);",
                  "    }",
                  "} else {",
                  "    console.log(\"‚ùå Update failed:\", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User to Faculty",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"faculty\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Update user role to faculty"
          }
        },
        {
          "name": "Update User to Student",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"student\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Update user role to student"
          }
        },
        {
          "name": "Deactivate User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Deactivate a user (soft delete)"
          }
        }
      ]
    },
    {
      "name": "üìä User Statistics",
      "item": [
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/stats",
              "host": ["{{base_url}}"],
              "path": ["users", "stats"]
            },
            "description": "Get user statistics (admin only)"
          }
        },
        {
          "name": "Get User Activity",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/activity",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "activity"]
            },
            "description": "Get activity history for a specific user"
          }
        }
      ]
    },
    {
      "name": "üîç Search & Profile",
      "item": [
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/search?q=test",
              "host": ["{{base_url}}"],
              "path": ["users", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ]
            },
            "description": "Search users by name or email"
          }
        },
        {
          "name": "Get User Profile (Public)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/profile/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "profile", "{{user_id}}"]
            },
            "description": "Get public profile of a user (no auth required)"
          }
        },
        {
          "name": "Get User Badges",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/badges",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "badges"]
            },
            "description": "Get badges earned by a user (public)"
          }
        }
      ]
    }
  ]
} 